{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\n// In AdminDashboard.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n// Other imports...\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  // Existing state variables...\n  const [responses, setResponses] = useState([]);\n  // Add new state variables for sorting\n  const [sortField, setSortField] = useState('startTime'); // Default sort by date\n  const [sortDirection, setSortDirection] = useState('desc'); // Default newest first\n\n  // Rest of your existing useEffect, etc.\n\n  // Add this new function to handle sorting\n  const handleSort = field => {\n    // If clicking the same field, toggle direction\n    if (field === sortField) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // New field, set it and default to ascending\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  // Function to sort responses\n  const getSortedResponses = () => {\n    if (!responses || responses.length === 0) return [];\n    return [...responses].sort((a, b) => {\n      let comparison = 0;\n      switch (sortField) {\n        case 'id':\n          comparison = a.id.localeCompare(b.id);\n          break;\n        case 'startTime':\n          comparison = new Date(a.startTime) - new Date(b.startTime);\n          break;\n        case 'answersCount':\n          comparison = a.answersCount - b.answersCount;\n          break;\n        default:\n          comparison = 0;\n      }\n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n  };\n\n  // Rest of your component code...\n\n  // In your render method, update the table header to include sort buttons\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"dashboard-section responses-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Survey Responses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), responses.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-data-message\",\n        children: \"No responses yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"responses-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: () => handleSort('id'),\n                className: \"sortable-header\",\n                children: [\"ID \", sortField === 'id' && (sortDirection === 'asc' ? '▲' : '▼')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: () => handleSort('startTime'),\n                className: \"sortable-header\",\n                children: [\"Date \", sortField === 'startTime' && (sortDirection === 'asc' ? '▲' : '▼')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                onClick: () => handleSort('answersCount'),\n                className: \"sortable-header\",\n                children: [\"Answers \", sortField === 'answersCount' && (sortDirection === 'asc' ? '▲' : '▼')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: getSortedResponses().map(response => /*#__PURE__*/_jsxDEV(\"tr\", {}, response.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"HFiHp2grsDEDkz3Om7e09TIfSIo=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","useHistory","jsxDEV","_jsxDEV","AdminDashboard","_s","responses","setResponses","sortField","setSortField","sortDirection","setSortDirection","handleSort","field","getSortedResponses","length","sort","a","b","comparison","id","localeCompare","Date","startTime","answersCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","response","_c","$RefreshReg$"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/AdminDashboard.js"],"sourcesContent":["// In AdminDashboard.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n// Other imports...\r\n\r\nconst AdminDashboard = () => {\r\n  // Existing state variables...\r\n  const [responses, setResponses] = useState([]);\r\n  // Add new state variables for sorting\r\n  const [sortField, setSortField] = useState('startTime'); // Default sort by date\r\n  const [sortDirection, setSortDirection] = useState('desc'); // Default newest first\r\n  \r\n  // Rest of your existing useEffect, etc.\r\n\r\n  // Add this new function to handle sorting\r\n  const handleSort = (field) => {\r\n    // If clicking the same field, toggle direction\r\n    if (field === sortField) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      // New field, set it and default to ascending\r\n      setSortField(field);\r\n      setSortDirection('asc');\r\n    }\r\n  };\r\n\r\n  // Function to sort responses\r\n  const getSortedResponses = () => {\r\n    if (!responses || responses.length === 0) return [];\r\n    \r\n    return [...responses].sort((a, b) => {\r\n      let comparison = 0;\r\n      \r\n      switch(sortField) {\r\n        case 'id':\r\n          comparison = a.id.localeCompare(b.id);\r\n          break;\r\n        case 'startTime':\r\n          comparison = new Date(a.startTime) - new Date(b.startTime);\r\n          break;\r\n        case 'answersCount':\r\n          comparison = a.answersCount - b.answersCount;\r\n          break;\r\n        default:\r\n          comparison = 0;\r\n      }\r\n      \r\n      return sortDirection === 'asc' ? comparison : -comparison;\r\n    });\r\n  };\r\n\r\n  // Rest of your component code...\r\n\r\n  // In your render method, update the table header to include sort buttons\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      {/* Header and other sections... */}\r\n      \r\n      <section className=\"dashboard-section responses-section\">\r\n        <h2>Survey Responses</h2>\r\n        {responses.length === 0 ? (\r\n          <p className=\"no-data-message\">No responses yet.</p>\r\n        ) : (\r\n          <div className=\"table-container\">\r\n            <table className=\"responses-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th onClick={() => handleSort('id')} className=\"sortable-header\">\r\n                    ID {sortField === 'id' && (sortDirection === 'asc' ? '▲' : '▼')}\r\n                  </th>\r\n                  <th onClick={() => handleSort('startTime')} className=\"sortable-header\">\r\n                    Date {sortField === 'startTime' && (sortDirection === 'asc' ? '▲' : '▼')}\r\n                  </th>\r\n                  <th onClick={() => handleSort('answersCount')} className=\"sortable-header\">\r\n                    Answers {sortField === 'answersCount' && (sortDirection === 'asc' ? '▲' : '▼')}\r\n                  </th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {getSortedResponses().map(response => (\r\n                  <tr key={response.id}>\r\n                    {/* Table cells... */}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}