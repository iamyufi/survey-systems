{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\Survey.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport WebsiteDisplay from './WebsiteDisplay';\nimport QuestionForm from './QuestionForm';\nimport WelcomeSurvey from './WelcomeSurvey';\nimport FarewellScreen from './FarewellScreen';\nimport axios from 'axios';\nfunction Survey() {\n  const [sessionId, setSessionId] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [websites, setWebsites] = useState([]);\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\n  const [showSurvey, setShowSurvey] = useState(false);\n  const [viewStartTime, setViewStartTime] = useState(null);\n  const [surveyStep, setSurveyStep] = useState('welcome');\n\n  // Enhanced new session creation\n  const startNewSession = useCallback(async () => {\n    try {\n      var _response$data;\n      setLoading(true);\n      setError(null);\n\n      // Force creation of a new session\n      localStorage.removeItem('surveySessionId');\n\n      // Use the current timestamp to ensure uniqueness\n      const timestamp = new Date().getTime();\n      console.log('Starting new survey session with timestamp:', timestamp);\n      const response = await axios.get(`/api/survey/start`, {\n        params: {\n          timestamp\n        },\n        timeout: 10000 // 10 seconds timeout\n      });\n\n      // Robust session ID extraction\n      const newSessionId = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.sessionId) || response.data.id;\n      if (!newSessionId) {\n        throw new Error('No session ID received from server');\n      }\n      console.log('Created new session:', newSessionId);\n\n      // Store session ID in local storage\n      localStorage.setItem('surveySessionId', newSessionId);\n      setSessionId(newSessionId);\n\n      // Fetch survey data\n      await fetchSurveyData(newSessionId);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error starting session:', err);\n\n      // More detailed error handling\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Kunne ikke starte spørgeskemaet. Prøv venligst igen.';\n      setError(errorMessage);\n      setLoading(false);\n    }\n  }, []);\n\n  // Enhanced survey data fetching\n  const fetchSurveyData = async id => {\n    try {\n      console.log('Fetching survey data for session:', id);\n      const response = await axios.get(`/api/survey/questions/${id}`, {\n        timeout: 10000 // 10 seconds timeout\n      });\n\n      // Robust data extraction with fallbacks\n      const surveyData = response.data || {};\n      console.log('Full Survey Data:', surveyData);\n\n      // Validate and set data with fallbacks\n      setWebsites(surveyData.websites || []);\n      setWebsiteQuestions(surveyData.websiteQuestions || []);\n      setDemographicQuestions(surveyData.demographicQuestions || []);\n\n      // Log data details\n      console.log('Survey data processed:', {\n        websitesCount: (surveyData.websites || []).length,\n        questionsCount: (surveyData.websiteQuestions || []).length,\n        demographicQuestionsCount: (surveyData.demographicQuestions || []).length\n      });\n      setLoading(false);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Error fetching survey data:', err);\n\n      // More detailed error handling\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || err.message || 'Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.';\n      setError(errorMessage);\n      setLoading(false);\n    }\n  };\n\n  // Initial effect for session management\n  useEffect(() => {\n    // Check if we have a session ID already\n    const existingSessionId = localStorage.getItem('surveySessionId');\n    if (existingSessionId) {\n      console.log('Resuming existing session:', existingSessionId);\n      setSessionId(existingSessionId);\n      fetchSurveyData(existingSessionId).catch(() => {\n        // If fetching fails, start a new session\n        startNewSession();\n      });\n    } else {\n      // Start a new session if no existing one\n      console.log('No existing session found, creating new one');\n      startNewSession();\n    }\n  }, [startNewSession]);\n\n  // Page unload effect\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      const currentSessionId = localStorage.getItem('surveySessionId');\n      if (currentSessionId) {\n        try {\n          const data = new Blob([JSON.stringify({})], {\n            type: 'application/json'\n          });\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\n          console.log('Survey completed via beforeunload event');\n        } catch (e) {\n          console.error('Error completing survey on unload:', e);\n        }\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Rest of the existing methods (handleDemographicsComplete, etc.)\n  const handleDemographicsComplete = () => {\n    console.log('Demographics complete, moving to websites step');\n    setSurveyStep('websites');\n    setViewStartTime(new Date());\n  };\n  const handleShowSurvey = () => {\n    console.log('Showing survey for website:', currentWebsiteIndex + 1);\n    setShowSurvey(true);\n  };\n  const handleSubmitAnswers = async (answers, isPartial = false) => {\n    try {\n      const viewEndTime = new Date();\n      const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds\n      const currentWebsite = websites[currentWebsiteIndex];\n      console.log(`${isPartial ? 'Saving partial' : 'Submitting final'} answers for website:`, currentWebsite['@_id']);\n      console.log('Answers data:', answers);\n\n      // Save answers\n      const response = await axios.post(`/api/survey/submit/${sessionId}`, {\n        websiteId: currentWebsite['@_id'],\n        answers,\n        viewTime,\n        partial: isPartial\n      });\n      console.log('Submit response:', response.data);\n\n      // Only proceed to next step for final submissions (not partial ones)\n      if (!isPartial) {\n        // Move to next website or complete survey\n        if (currentWebsiteIndex < websites.length - 1) {\n          setCurrentWebsiteIndex(currentWebsiteIndex + 1);\n          setShowSurvey(false);\n          setViewStartTime(new Date());\n        } else {\n          // Explicitly complete the survey\n          try {\n            const completeResponse = await axios.post(`/api/survey/complete/${sessionId}`);\n            console.log('Survey completed successfully:', completeResponse.data);\n          } catch (completeErr) {\n            console.error('Error marking survey as complete:', completeErr);\n          }\n          setSurveyStep('farewell');\n\n          // Start fresh for next user\n          localStorage.removeItem('surveySessionId');\n        }\n      }\n    } catch (err) {\n      console.error('Error submitting answers:', err);\n      setError('Kunne ikke indsende svar. Prøv venligst igen.');\n    }\n  };\n\n  // Rendering logic\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 12\n      }\n    }, \"Indl\\xE6ser sp\\xF8rgeskema...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, error), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: startNewSession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, \"Pr\\xF8v igen\"));\n  }\n\n  // Existing rendering logic for different survey steps\n  if (surveyStep === 'welcome') {\n    return /*#__PURE__*/React.createElement(WelcomeSurvey, {\n      sessionId: sessionId,\n      onComplete: handleDemographicsComplete,\n      demographicQuestions: demographicQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }\n    });\n  }\n  if (surveyStep === 'farewell') {\n    return /*#__PURE__*/React.createElement(FarewellScreen, {\n      sessionId: sessionId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 12\n      }\n    });\n  }\n\n  // Website survey flow\n  const currentWebsite = websites[currentWebsiteIndex];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"survey-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }, !showSurvey ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"website-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WebsiteDisplay, {\n    website: currentWebsite,\n    onShowSurvey: handleShowSurvey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, \"Sp\\xF8rgsm\\xE5l om hjemmesiden\"), /*#__PURE__*/React.createElement(QuestionForm, {\n    questions: websiteQuestions,\n    onSubmit: handleSubmitAnswers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }, \"Hjemmeside \", currentWebsiteIndex + 1, \" af \", websites.length));\n}\nexport default Survey;","map":{"version":3,"names":["React","useState","useEffect","useCallback","WebsiteDisplay","QuestionForm","WelcomeSurvey","FarewellScreen","axios","Survey","sessionId","setSessionId","loading","setLoading","error","setError","websites","setWebsites","websiteQuestions","setWebsiteQuestions","demographicQuestions","setDemographicQuestions","currentWebsiteIndex","setCurrentWebsiteIndex","showSurvey","setShowSurvey","viewStartTime","setViewStartTime","surveyStep","setSurveyStep","startNewSession","_response$data","localStorage","removeItem","timestamp","Date","getTime","console","log","response","get","params","timeout","newSessionId","data","id","Error","setItem","fetchSurveyData","err","_err$response","_err$response$data","errorMessage","message","surveyData","websitesCount","length","questionsCount","demographicQuestionsCount","_err$response2","_err$response2$data","existingSessionId","getItem","catch","handleBeforeUnload","currentSessionId","Blob","JSON","stringify","type","navigator","sendBeacon","e","window","addEventListener","removeEventListener","handleDemographicsComplete","handleShowSurvey","handleSubmitAnswers","answers","isPartial","viewEndTime","viewTime","currentWebsite","post","websiteId","partial","completeResponse","completeErr","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onComplete","website","onShowSurvey","questions","onSubmit"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport WebsiteDisplay from './WebsiteDisplay';\r\nimport QuestionForm from './QuestionForm';\r\nimport WelcomeSurvey from './WelcomeSurvey';\r\nimport FarewellScreen from './FarewellScreen';\r\nimport axios from 'axios';\r\n\r\nfunction Survey() {\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [websites, setWebsites] = useState([]);\r\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\r\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\r\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\r\n  const [showSurvey, setShowSurvey] = useState(false);\r\n  const [viewStartTime, setViewStartTime] = useState(null);\r\n  const [surveyStep, setSurveyStep] = useState('welcome');\r\n\r\n  // Enhanced new session creation\r\n  const startNewSession = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Force creation of a new session\r\n      localStorage.removeItem('surveySessionId');\r\n      \r\n      // Use the current timestamp to ensure uniqueness\r\n      const timestamp = new Date().getTime();\r\n      console.log('Starting new survey session with timestamp:', timestamp);\r\n      \r\n      const response = await axios.get(`/api/survey/start`, {\r\n        params: { timestamp },\r\n        timeout: 10000 // 10 seconds timeout\r\n      });\r\n      \r\n      // Robust session ID extraction\r\n      const newSessionId = response.data?.sessionId || response.data.id;\r\n      \r\n      if (!newSessionId) {\r\n        throw new Error('No session ID received from server');\r\n      }\r\n      \r\n      console.log('Created new session:', newSessionId);\r\n      \r\n      // Store session ID in local storage\r\n      localStorage.setItem('surveySessionId', newSessionId);\r\n      setSessionId(newSessionId);\r\n      \r\n      // Fetch survey data\r\n      await fetchSurveyData(newSessionId);\r\n    } catch (err) {\r\n      console.error('Error starting session:', err);\r\n      \r\n      // More detailed error handling\r\n      const errorMessage = err.response?.data?.error \r\n        || err.message \r\n        || 'Kunne ikke starte spørgeskemaet. Prøv venligst igen.';\r\n      \r\n      setError(errorMessage);\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Enhanced survey data fetching\r\n  const fetchSurveyData = async (id) => {\r\n    try {\r\n      console.log('Fetching survey data for session:', id);\r\n      \r\n      const response = await axios.get(`/api/survey/questions/${id}`, {\r\n        timeout: 10000 // 10 seconds timeout\r\n      });\r\n      \r\n      // Robust data extraction with fallbacks\r\n      const surveyData = response.data || {};\r\n      \r\n      console.log('Full Survey Data:', surveyData);\r\n      \r\n      // Validate and set data with fallbacks\r\n      setWebsites(surveyData.websites || []);\r\n      setWebsiteQuestions(surveyData.websiteQuestions || []);\r\n      setDemographicQuestions(surveyData.demographicQuestions || []);\r\n      \r\n      // Log data details\r\n      console.log('Survey data processed:', {\r\n        websitesCount: (surveyData.websites || []).length,\r\n        questionsCount: (surveyData.websiteQuestions || []).length,\r\n        demographicQuestionsCount: (surveyData.demographicQuestions || []).length\r\n      });\r\n      \r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching survey data:', err);\r\n      \r\n      // More detailed error handling\r\n      const errorMessage = err.response?.data?.error \r\n        || err.message \r\n        || 'Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.';\r\n      \r\n      setError(errorMessage);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial effect for session management\r\n  useEffect(() => {\r\n    // Check if we have a session ID already\r\n    const existingSessionId = localStorage.getItem('surveySessionId');\r\n    \r\n    if (existingSessionId) {\r\n      console.log('Resuming existing session:', existingSessionId);\r\n      setSessionId(existingSessionId);\r\n      fetchSurveyData(existingSessionId).catch(() => {\r\n        // If fetching fails, start a new session\r\n        startNewSession();\r\n      });\r\n    } else {\r\n      // Start a new session if no existing one\r\n      console.log('No existing session found, creating new one');\r\n      startNewSession();\r\n    }\r\n  }, [startNewSession]);\r\n\r\n  // Page unload effect\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      const currentSessionId = localStorage.getItem('surveySessionId');\r\n      if (currentSessionId) {\r\n        try {\r\n          const data = new Blob([JSON.stringify({})], { type: 'application/json' });\r\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\r\n          console.log('Survey completed via beforeunload event');\r\n        } catch (e) {\r\n          console.error('Error completing survey on unload:', e);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    \r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  // Rest of the existing methods (handleDemographicsComplete, etc.)\r\n  const handleDemographicsComplete = () => {\r\n    console.log('Demographics complete, moving to websites step');\r\n    setSurveyStep('websites');\r\n    setViewStartTime(new Date());\r\n  };\r\n\r\n  const handleShowSurvey = () => {\r\n    console.log('Showing survey for website:', currentWebsiteIndex + 1);\r\n    setShowSurvey(true);\r\n  };\r\n\r\n  const handleSubmitAnswers = async (answers, isPartial = false) => {\r\n    try {\r\n      const viewEndTime = new Date();\r\n      const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds\r\n      const currentWebsite = websites[currentWebsiteIndex];\r\n      \r\n      console.log(`${isPartial ? 'Saving partial' : 'Submitting final'} answers for website:`, currentWebsite['@_id']);\r\n      console.log('Answers data:', answers);\r\n      \r\n      // Save answers\r\n      const response = await axios.post(`/api/survey/submit/${sessionId}`, {\r\n        websiteId: currentWebsite['@_id'],\r\n        answers,\r\n        viewTime,\r\n        partial: isPartial\r\n      });\r\n      \r\n      console.log('Submit response:', response.data);\r\n      \r\n      // Only proceed to next step for final submissions (not partial ones)\r\n      if (!isPartial) {\r\n        // Move to next website or complete survey\r\n        if (currentWebsiteIndex < websites.length - 1) {\r\n          setCurrentWebsiteIndex(currentWebsiteIndex + 1);\r\n          setShowSurvey(false);\r\n          setViewStartTime(new Date());\r\n        } else {\r\n          // Explicitly complete the survey\r\n          try {\r\n            const completeResponse = await axios.post(`/api/survey/complete/${sessionId}`);\r\n            console.log('Survey completed successfully:', completeResponse.data);\r\n          } catch (completeErr) {\r\n            console.error('Error marking survey as complete:', completeErr);\r\n          }\r\n          \r\n          setSurveyStep('farewell');\r\n          \r\n          // Start fresh for next user\r\n          localStorage.removeItem('surveySessionId');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error submitting answers:', err);\r\n      setError('Kunne ikke indsende svar. Prøv venligst igen.');\r\n    }\r\n  };\r\n\r\n  // Rendering logic\r\n  if (loading) {\r\n    return <div className=\"loading\">Indlæser spørgeskema...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"error\">\r\n        <p>{error}</p>\r\n        <button onClick={startNewSession}>Prøv igen</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Existing rendering logic for different survey steps\r\n  if (surveyStep === 'welcome') {\r\n    return (\r\n      <WelcomeSurvey \r\n        sessionId={sessionId}\r\n        onComplete={handleDemographicsComplete}\r\n        demographicQuestions={demographicQuestions}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (surveyStep === 'farewell') {\r\n    return <FarewellScreen sessionId={sessionId} />;\r\n  }\r\n\r\n  // Website survey flow\r\n  const currentWebsite = websites[currentWebsiteIndex];\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      {!showSurvey ? (\r\n        <div className=\"website-view\">\r\n          <WebsiteDisplay\r\n            website={currentWebsite}\r\n            onShowSurvey={handleShowSurvey}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className=\"question-form\">\r\n          <h2>Spørgsmål om hjemmesiden</h2>\r\n          <QuestionForm\r\n            questions={websiteQuestions}\r\n            onSubmit={handleSubmitAnswers}\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"progress\">\r\n        Hjemmeside {currentWebsiteIndex + 1} af {websites.length}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}