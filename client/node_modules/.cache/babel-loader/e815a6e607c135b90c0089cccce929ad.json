{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\Survey.js\";\n// client/src/components/Survey.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport WebsiteDisplay from './WebsiteDisplay';\nimport QuestionForm from './QuestionForm';\nimport WelcomeSurvey from './WelcomeSurvey';\nimport FarewellScreen from './FarewellScreen';\nimport axios from 'axios';\nfunction Survey() {\n  const [sessionId, setSessionId] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [websites, setWebsites] = useState([]);\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\n  const [showSurvey, setShowSurvey] = useState(false);\n  const [viewStartTime, setViewStartTime] = useState(null);\n  const [surveyStep, setSurveyStep] = useState('welcome'); // 'welcome', 'websites', 'farewell'\n\n  // Use useCallback to prevent unnecessary recreation of this function\n  const startNewSession = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Force creation of a new session\n      localStorage.removeItem('surveySessionId');\n\n      // Use the current timestamp to ensure uniqueness\n      const timestamp = new Date().getTime();\n      console.log('Starting new survey session with timestamp:', timestamp);\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`);\n      const {\n        sessionId\n      } = response.data;\n      console.log('Created new session:', sessionId);\n\n      // Store session ID in local storage\n      localStorage.setItem('surveySessionId', sessionId);\n      setSessionId(sessionId);\n      fetchSurveyData(sessionId);\n    } catch (err) {\n      var _err$response;\n      console.error('Error starting session:', err);\n      console.error('Error details:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || 'No response data');\n      setError('Kunne ikke starte spørgeskemaet. Prøv venligst igen.');\n      setLoading(false);\n    }\n  }, []);\n  const fetchSurveyData = async id => {\n    try {\n      console.log('Fetching survey data for session:', id);\n      setError(null);\n      const response = await axios.get(`/api/survey/questions/${id}`);\n      console.log('Survey data received:', {\n        websitesCount: response.data.websites.length,\n        questionsCount: response.data.questions.length,\n        demographicQuestionsCount: response.data.demographicQuestions.length,\n        websiteQuestionsCount: response.data.websiteQuestions.length\n      });\n      setWebsites(response.data.websites);\n      setWebsiteQuestions(response.data.websiteQuestions);\n      setDemographicQuestions(response.data.demographicQuestions);\n      setLoading(false);\n    } catch (err) {\n      var _err$response2, _err$response3;\n      console.error('Error fetching survey data:', err);\n      console.error('Error details:', ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || 'No response data');\n\n      // If session not found, create a new one\n      if (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status) === 404) {\n        console.log('Session not found during data fetch, creating new one');\n        startNewSession();\n      } else {\n        setError('Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.');\n        setLoading(false);\n      }\n    }\n  };\n\n  // Validate session periodically\n  const validateSession = useCallback(async () => {\n    if (!sessionId) return;\n    try {\n      // Simple ping to check if session exists\n      await axios.get(`/api/survey/questions/${sessionId}`);\n      console.log('Session validation successful');\n    } catch (err) {\n      var _err$response4;\n      console.error('Session validation failed:', err);\n      if (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status) === 404) {\n        console.log('Session not found during validation, creating new one');\n        startNewSession();\n      }\n    }\n  }, [sessionId, startNewSession]);\n  useEffect(() => {\n    // Check if we have a session ID already\n    const existingSessionId = localStorage.getItem('surveySessionId');\n    if (existingSessionId) {\n      console.log('Resuming existing session:', existingSessionId);\n      setSessionId(existingSessionId);\n      fetchSurveyData(existingSessionId);\n    } else {\n      // Only start a new session if we don't have one\n      console.log('No existing session found, creating new one');\n      startNewSession();\n    }\n  }, [startNewSession]); // Add startNewSession as a dependency\n\n  // Validate session when component mounts and when sessionId changes\n  useEffect(() => {\n    if (sessionId) {\n      validateSession();\n    }\n  }, [sessionId, validateSession]);\n\n  // Add an effect to handle page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      // Complete the survey if user leaves\n      const currentSessionId = localStorage.getItem('surveySessionId');\n      if (currentSessionId) {\n        try {\n          // Use sendBeacon for more reliable sending during page unload\n          const data = new Blob([JSON.stringify({})], {\n            type: 'application/json'\n          });\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\n          console.log('Survey completed via beforeunload event');\n        } catch (e) {\n          console.error('Error completing survey on unload:', e);\n        }\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  const handleDemographicsComplete = () => {\n    console.log('Demographics complete, moving to websites step');\n    setSurveyStep('websites');\n    setViewStartTime(new Date());\n  };\n  const handleShowSurvey = () => {\n    console.log('Showing survey for website:', currentWebsiteIndex + 1);\n    setShowSurvey(true);\n  };\n  const handleSubmitAnswers = async (answers, isPartial = false) => {\n    try {\n      // Validate session ID\n      if (!sessionId || sessionId.trim() === '') {\n        console.error('Invalid sessionId:', sessionId);\n        setError('Ugyldig session - genindlæs venligst siden');\n        return;\n      }\n      const viewEndTime = new Date();\n      const viewTime = viewStartTime ? (viewEndTime - viewStartTime) / 1000 : 0; // in seconds\n\n      if (!websites || !websites[currentWebsiteIndex]) {\n        console.error('Website data not available at index:', currentWebsiteIndex);\n        setError('Hjemmesidedata mangler - genindlæs venligst siden');\n        return;\n      }\n      const currentWebsite = websites[currentWebsiteIndex];\n      const websiteId = currentWebsite['@_id'];\n      if (!websiteId) {\n        console.error('Missing website ID for index:', currentWebsiteIndex, currentWebsite);\n        setError('Hjemmeside-ID mangler - genindlæs venligst siden');\n        return;\n      }\n      console.log(`${isPartial ? 'Saving partial' : 'Submitting final'} answers for website:`, websiteId);\n      console.log('Answers data:', JSON.stringify(answers).substring(0, 200) + '...');\n      console.log('View time:', viewTime, 'seconds');\n\n      // Save answers\n      const response = await axios.post(`/api/survey/submit/${sessionId}`, {\n        websiteId: websiteId,\n        answers,\n        viewTime,\n        partial: isPartial\n      });\n      console.log('Submit response:', response.data);\n\n      // Only proceed to next step for final submissions (not partial ones)\n      if (!isPartial) {\n        // Move to next website or complete survey\n        if (currentWebsiteIndex < websites.length - 1) {\n          setCurrentWebsiteIndex(currentWebsiteIndex + 1);\n          setShowSurvey(false);\n          setViewStartTime(new Date());\n        } else {\n          // Explicitly complete the survey\n          try {\n            const completeResponse = await axios.post(`/api/survey/complete/${sessionId}`);\n            console.log('Survey completed successfully:', completeResponse.data);\n          } catch (completeErr) {\n            var _completeErr$response;\n            console.error('Error marking survey as complete:', completeErr);\n            console.error('Error details:', ((_completeErr$response = completeErr.response) === null || _completeErr$response === void 0 ? void 0 : _completeErr$response.data) || 'No response data');\n          }\n          setSurveyStep('farewell');\n\n          // Start fresh for next user\n          localStorage.removeItem('surveySessionId');\n        }\n      }\n    } catch (err) {\n      var _err$response5, _err$response6;\n      console.error('Error submitting answers:', err);\n      console.error('Error details:', ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.data) || 'No response data');\n\n      // Check if server is unreachable\n      if (err.code === 'ECONNABORTED' || !err.response) {\n        setError('Kunne ikke nå serveren. Kontrollér din internetforbindelse og prøv igen.');\n      } else if (((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : _err$response6.status) === 404) {\n        console.log('Session not found, creating new one');\n        startNewSession();\n      } else {\n        setError('Kunne ikke indsende svar. Prøv venligst igen.');\n      }\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 12\n      }\n    }, \"Indl\\xE6ser sp\\xF8rgeskema...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, error), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"retry-button\",\n      onClick: () => {\n        setError(null);\n        startNewSession();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, \"Pr\\xF8v igen\"));\n  }\n\n  // Render different steps of the survey\n  if (surveyStep === 'welcome') {\n    return /*#__PURE__*/React.createElement(WelcomeSurvey, {\n      sessionId: sessionId,\n      onComplete: handleDemographicsComplete,\n      demographicQuestions: demographicQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 7\n      }\n    });\n  }\n  if (surveyStep === 'farewell') {\n    return /*#__PURE__*/React.createElement(FarewellScreen, {\n      sessionId: sessionId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 12\n      }\n    });\n  }\n\n  // Website survey flow\n  const currentWebsite = websites[currentWebsiteIndex];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"survey-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, !showSurvey ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"website-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WebsiteDisplay, {\n    website: currentWebsite,\n    onShowSurvey: handleShowSurvey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, \"Sp\\xF8rgsm\\xE5l om hjemmesiden\"), /*#__PURE__*/React.createElement(QuestionForm, {\n    questions: websiteQuestions,\n    onSubmit: handleSubmitAnswers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }\n  }, \"Hjemmeside \", currentWebsiteIndex + 1, \" af \", websites.length));\n}\nexport default Survey;","map":{"version":3,"names":["React","useState","useEffect","useCallback","WebsiteDisplay","QuestionForm","WelcomeSurvey","FarewellScreen","axios","Survey","sessionId","setSessionId","loading","setLoading","error","setError","websites","setWebsites","websiteQuestions","setWebsiteQuestions","demographicQuestions","setDemographicQuestions","currentWebsiteIndex","setCurrentWebsiteIndex","showSurvey","setShowSurvey","viewStartTime","setViewStartTime","surveyStep","setSurveyStep","startNewSession","localStorage","removeItem","timestamp","Date","getTime","console","log","response","get","data","setItem","fetchSurveyData","err","_err$response","id","websitesCount","length","questionsCount","questions","demographicQuestionsCount","websiteQuestionsCount","_err$response2","_err$response3","status","validateSession","_err$response4","existingSessionId","getItem","handleBeforeUnload","currentSessionId","Blob","JSON","stringify","type","navigator","sendBeacon","e","window","addEventListener","removeEventListener","handleDemographicsComplete","handleShowSurvey","handleSubmitAnswers","answers","isPartial","trim","viewEndTime","viewTime","currentWebsite","websiteId","substring","post","partial","completeResponse","completeErr","_completeErr$response","_err$response5","_err$response6","code","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onComplete","website","onShowSurvey","onSubmit"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/Survey.js"],"sourcesContent":["// client/src/components/Survey.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport WebsiteDisplay from './WebsiteDisplay';\r\nimport QuestionForm from './QuestionForm';\r\nimport WelcomeSurvey from './WelcomeSurvey';\r\nimport FarewellScreen from './FarewellScreen';\r\nimport axios from 'axios';\r\n\r\nfunction Survey() {\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [websites, setWebsites] = useState([]);\r\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\r\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\r\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\r\n  const [showSurvey, setShowSurvey] = useState(false);\r\n  const [viewStartTime, setViewStartTime] = useState(null);\r\n  const [surveyStep, setSurveyStep] = useState('welcome'); // 'welcome', 'websites', 'farewell'\r\n\r\n  // Use useCallback to prevent unnecessary recreation of this function\r\n  const startNewSession = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Force creation of a new session\r\n      localStorage.removeItem('surveySessionId');\r\n      \r\n      // Use the current timestamp to ensure uniqueness\r\n      const timestamp = new Date().getTime();\r\n      console.log('Starting new survey session with timestamp:', timestamp);\r\n      \r\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`);\r\n      const { sessionId } = response.data;\r\n      \r\n      console.log('Created new session:', sessionId);\r\n      \r\n      // Store session ID in local storage\r\n      localStorage.setItem('surveySessionId', sessionId);\r\n      setSessionId(sessionId);\r\n      \r\n      fetchSurveyData(sessionId);\r\n    } catch (err) {\r\n      console.error('Error starting session:', err);\r\n      console.error('Error details:', err.response?.data || 'No response data');\r\n      setError('Kunne ikke starte spørgeskemaet. Prøv venligst igen.');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchSurveyData = async (id) => {\r\n    try {\r\n      console.log('Fetching survey data for session:', id);\r\n      setError(null);\r\n      \r\n      const response = await axios.get(`/api/survey/questions/${id}`);\r\n      \r\n      console.log('Survey data received:', {\r\n        websitesCount: response.data.websites.length,\r\n        questionsCount: response.data.questions.length,\r\n        demographicQuestionsCount: response.data.demographicQuestions.length,\r\n        websiteQuestionsCount: response.data.websiteQuestions.length\r\n      });\r\n      \r\n      setWebsites(response.data.websites);\r\n      setWebsiteQuestions(response.data.websiteQuestions);\r\n      setDemographicQuestions(response.data.demographicQuestions);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching survey data:', err);\r\n      console.error('Error details:', err.response?.data || 'No response data');\r\n      \r\n      // If session not found, create a new one\r\n      if (err.response?.status === 404) {\r\n        console.log('Session not found during data fetch, creating new one');\r\n        startNewSession();\r\n      } else {\r\n        setError('Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.');\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Validate session periodically\r\n  const validateSession = useCallback(async () => {\r\n    if (!sessionId) return;\r\n    \r\n    try {\r\n      // Simple ping to check if session exists\r\n      await axios.get(`/api/survey/questions/${sessionId}`);\r\n      console.log('Session validation successful');\r\n    } catch (err) {\r\n      console.error('Session validation failed:', err);\r\n      if (err.response?.status === 404) {\r\n        console.log('Session not found during validation, creating new one');\r\n        startNewSession();\r\n      }\r\n    }\r\n  }, [sessionId, startNewSession]);\r\n\r\n  useEffect(() => {\r\n    // Check if we have a session ID already\r\n    const existingSessionId = localStorage.getItem('surveySessionId');\r\n    \r\n    if (existingSessionId) {\r\n      console.log('Resuming existing session:', existingSessionId);\r\n      setSessionId(existingSessionId);\r\n      fetchSurveyData(existingSessionId);\r\n    } else {\r\n      // Only start a new session if we don't have one\r\n      console.log('No existing session found, creating new one');\r\n      startNewSession();\r\n    }\r\n  }, [startNewSession]); // Add startNewSession as a dependency\r\n  \r\n  // Validate session when component mounts and when sessionId changes\r\n  useEffect(() => {\r\n    if (sessionId) {\r\n      validateSession();\r\n    }\r\n  }, [sessionId, validateSession]);\r\n\r\n  // Add an effect to handle page unload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      // Complete the survey if user leaves\r\n      const currentSessionId = localStorage.getItem('surveySessionId');\r\n      if (currentSessionId) {\r\n        try {\r\n          // Use sendBeacon for more reliable sending during page unload\r\n          const data = new Blob([JSON.stringify({})], { type: 'application/json' });\r\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\r\n          console.log('Survey completed via beforeunload event');\r\n        } catch (e) {\r\n          console.error('Error completing survey on unload:', e);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    \r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  const handleDemographicsComplete = () => {\r\n    console.log('Demographics complete, moving to websites step');\r\n    setSurveyStep('websites');\r\n    setViewStartTime(new Date());\r\n  };\r\n\r\n  const handleShowSurvey = () => {\r\n    console.log('Showing survey for website:', currentWebsiteIndex + 1);\r\n    setShowSurvey(true);\r\n  };\r\n\r\n  const handleSubmitAnswers = async (answers, isPartial = false) => {\r\n    try {\r\n      // Validate session ID\r\n      if (!sessionId || sessionId.trim() === '') {\r\n        console.error('Invalid sessionId:', sessionId);\r\n        setError('Ugyldig session - genindlæs venligst siden');\r\n        return;\r\n      }\r\n      \r\n      const viewEndTime = new Date();\r\n      const viewTime = viewStartTime ? (viewEndTime - viewStartTime) / 1000 : 0; // in seconds\r\n      \r\n      if (!websites || !websites[currentWebsiteIndex]) {\r\n        console.error('Website data not available at index:', currentWebsiteIndex);\r\n        setError('Hjemmesidedata mangler - genindlæs venligst siden');\r\n        return;\r\n      }\r\n      \r\n      const currentWebsite = websites[currentWebsiteIndex];\r\n      const websiteId = currentWebsite['@_id'];\r\n      \r\n      if (!websiteId) {\r\n        console.error('Missing website ID for index:', currentWebsiteIndex, currentWebsite);\r\n        setError('Hjemmeside-ID mangler - genindlæs venligst siden');\r\n        return;\r\n      }\r\n      \r\n      console.log(`${isPartial ? 'Saving partial' : 'Submitting final'} answers for website:`, websiteId);\r\n      console.log('Answers data:', JSON.stringify(answers).substring(0, 200) + '...');\r\n      console.log('View time:', viewTime, 'seconds');\r\n      \r\n      // Save answers\r\n      const response = await axios.post(`/api/survey/submit/${sessionId}`, {\r\n        websiteId: websiteId,\r\n        answers,\r\n        viewTime,\r\n        partial: isPartial\r\n      });\r\n      \r\n      console.log('Submit response:', response.data);\r\n      \r\n      // Only proceed to next step for final submissions (not partial ones)\r\n      if (!isPartial) {\r\n        // Move to next website or complete survey\r\n        if (currentWebsiteIndex < websites.length - 1) {\r\n          setCurrentWebsiteIndex(currentWebsiteIndex + 1);\r\n          setShowSurvey(false);\r\n          setViewStartTime(new Date());\r\n        } else {\r\n          // Explicitly complete the survey\r\n          try {\r\n            const completeResponse = await axios.post(`/api/survey/complete/${sessionId}`);\r\n            console.log('Survey completed successfully:', completeResponse.data);\r\n          } catch (completeErr) {\r\n            console.error('Error marking survey as complete:', completeErr);\r\n            console.error('Error details:', completeErr.response?.data || 'No response data');\r\n          }\r\n          \r\n          setSurveyStep('farewell');\r\n          \r\n          // Start fresh for next user\r\n          localStorage.removeItem('surveySessionId');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error submitting answers:', err);\r\n      console.error('Error details:', err.response?.data || 'No response data');\r\n      \r\n      // Check if server is unreachable\r\n      if (err.code === 'ECONNABORTED' || !err.response) {\r\n        setError('Kunne ikke nå serveren. Kontrollér din internetforbindelse og prøv igen.');\r\n      } else if (err.response?.status === 404) {\r\n        console.log('Session not found, creating new one');\r\n        startNewSession();\r\n      } else {\r\n        setError('Kunne ikke indsende svar. Prøv venligst igen.');\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Indlæser spørgeskema...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"error-container\">\r\n        <div className=\"error\">{error}</div>\r\n        <button \r\n          className=\"retry-button\" \r\n          onClick={() => {\r\n            setError(null);\r\n            startNewSession();\r\n          }}\r\n        >\r\n          Prøv igen\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render different steps of the survey\r\n  if (surveyStep === 'welcome') {\r\n    return (\r\n      <WelcomeSurvey \r\n        sessionId={sessionId}\r\n        onComplete={handleDemographicsComplete}\r\n        demographicQuestions={demographicQuestions}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (surveyStep === 'farewell') {\r\n    return <FarewellScreen sessionId={sessionId} />;\r\n  }\r\n\r\n  // Website survey flow\r\n  const currentWebsite = websites[currentWebsiteIndex];\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      {!showSurvey ? (\r\n        <div className=\"website-view\">\r\n          <WebsiteDisplay\r\n            website={currentWebsite}\r\n            onShowSurvey={handleShowSurvey}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className=\"question-form\">\r\n          <h2>Spørgsmål om hjemmesiden</h2>\r\n          <QuestionForm\r\n            questions={websiteQuestions}\r\n            onSubmit={handleSubmitAnswers}\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"progress\">\r\n        Hjemmeside {currentWebsiteIndex + 1} af {websites.length}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}