{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\QuestionForm.js\",\n  _s = $RefreshSig$();\n// client/src/components/QuestionForm.js\nimport React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionForm({\n  questions,\n  onSubmit\n}) {\n  _s();\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const [lastSubmittedQuestionId, setLastSubmittedQuestionId] = useState(null);\n\n  // Submit answers as soon as any answer changes\n  const handleAnswerChange = (questionId, answer) => {\n    // Update the answers state\n    const updatedAnswers = {\n      ...answers,\n      [questionId]: answer\n    };\n    setAnswers(updatedAnswers);\n\n    // Clear error for this question if it exists\n    if (errors[questionId]) {\n      setErrors(prev => {\n        const newErrors = {\n          ...prev\n        };\n        delete newErrors[questionId];\n        return newErrors;\n      });\n    }\n\n    // Submit this answer immediately (only if it's not empty)\n    if (answer && answer !== '') {\n      submitSingleAnswer(questionId, updatedAnswers);\n    }\n  };\n  const submitSingleAnswer = (questionId, currentAnswers) => {\n    // Don't resubmit the same question multiple times in quick succession\n    if (questionId === lastSubmittedQuestionId) {\n      return;\n    }\n\n    // Submit the current state of all answers\n    // This way we ensure the server has the complete picture\n    setLastSubmittedQuestionId(questionId);\n    onSubmit(currentAnswers);\n\n    // Reset the last submitted ID after a delay to allow re-submission if changed\n    setTimeout(() => {\n      setLastSubmittedQuestionId(null);\n    }, 500);\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    let isValid = true;\n\n    // Check required fields\n    questions.forEach(question => {\n      if (question.obligatorisk === 'true' && (!answers[question['@_id']] || answers[question['@_id']] === '')) {\n        newErrors[question['@_id']] = 'Dette felt er påkrævet';\n        isValid = false;\n      }\n    });\n    setErrors(newErrors);\n    return isValid;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      return;\n    }\n\n    // Submit all answers as a final submission\n    onSubmit(answers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"question-form\",\n    children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        onChange: answer => handleAnswerChange(question['@_id'], answer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), errors[question['@_id']] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-text\",\n        children: errors[question['@_id']]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, question['@_id'], true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"submit-button\",\n      children: \"Forts\\xE6t\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionForm, \"rAibh7Pb7pU0ouiqx7MtYxRSC5Y=\");\n_c = QuestionForm;\nexport default QuestionForm;\nvar _c;\n$RefreshReg$(_c, \"QuestionForm\");","map":{"version":3,"names":["React","useState","useEffect","Question","jsxDEV","_jsxDEV","QuestionForm","questions","onSubmit","_s","answers","setAnswers","errors","setErrors","lastSubmittedQuestionId","setLastSubmittedQuestionId","handleAnswerChange","questionId","answer","updatedAnswers","prev","newErrors","submitSingleAnswer","currentAnswers","setTimeout","validateForm","isValid","forEach","question","obligatorisk","handleSubmit","e","preventDefault","className","children","map","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/QuestionForm.js"],"sourcesContent":["// client/src/components/QuestionForm.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Question from './Question';\r\n\r\nfunction QuestionForm({ questions, onSubmit }) {\r\n  const [answers, setAnswers] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [lastSubmittedQuestionId, setLastSubmittedQuestionId] = useState(null);\r\n\r\n  // Submit answers as soon as any answer changes\r\n  const handleAnswerChange = (questionId, answer) => {\r\n    // Update the answers state\r\n    const updatedAnswers = {\r\n      ...answers,\r\n      [questionId]: answer\r\n    };\r\n    \r\n    setAnswers(updatedAnswers);\r\n    \r\n    // Clear error for this question if it exists\r\n    if (errors[questionId]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[questionId];\r\n        return newErrors;\r\n      });\r\n    }\r\n    \r\n    // Submit this answer immediately (only if it's not empty)\r\n    if (answer && answer !== '') {\r\n      submitSingleAnswer(questionId, updatedAnswers);\r\n    }\r\n  };\r\n\r\n  const submitSingleAnswer = (questionId, currentAnswers) => {\r\n    // Don't resubmit the same question multiple times in quick succession\r\n    if (questionId === lastSubmittedQuestionId) {\r\n      return;\r\n    }\r\n    \r\n    // Submit the current state of all answers\r\n    // This way we ensure the server has the complete picture\r\n    setLastSubmittedQuestionId(questionId);\r\n    onSubmit(currentAnswers);\r\n    \r\n    // Reset the last submitted ID after a delay to allow re-submission if changed\r\n    setTimeout(() => {\r\n      setLastSubmittedQuestionId(null);\r\n    }, 500);\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n    \r\n    // Check required fields\r\n    questions.forEach(question => {\r\n      if (question.obligatorisk === 'true' && (!answers[question['@_id']] || answers[question['@_id']] === '')) {\r\n        newErrors[question['@_id']] = 'Dette felt er påkrævet';\r\n        isValid = false;\r\n      }\r\n    });\r\n    \r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    // Submit all answers as a final submission\r\n    onSubmit(answers);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"question-form\">\r\n      {questions.map(question => (\r\n        <div key={question['@_id']} className=\"question-container\">\r\n          <Question\r\n            question={question}\r\n            onChange={(answer) => handleAnswerChange(question['@_id'], answer)}\r\n          />\r\n          \r\n          {errors[question['@_id']] && (\r\n            <div className=\"error-text\">{errors[question['@_id']]}</div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      <button \r\n        type=\"submit\" \r\n        className=\"submit-button\"\r\n      >\r\n        Fortsæt\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default QuestionForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}