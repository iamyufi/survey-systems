{"ast":null,"code":"import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nfunction Survey() {\n  // ... existing state declarations\n\n  // Modify fetchSurveyData to include more robust error handling\n  const fetchSurveyData = async id => {\n    try {\n      console.log('Fetching survey data for session:', id);\n\n      // Add more detailed error logging\n      const response = await axios.get(`/api/survey/questions/${id}`, {\n        // Add timeout and additional config\n        timeout: 10000,\n        // 10 seconds timeout\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n\n      // Log full response for debugging\n      console.log('Full API Response:', response);\n      console.log('Survey data received:', {\n        websitesCount: response.data.websites.length,\n        questionsCount: response.data.questions.length,\n        demographicQuestionsCount: response.data.demographicQuestions.length,\n        websiteQuestionsCount: response.data.websiteQuestions.length\n      });\n      setWebsites(response.data.websites);\n      setWebsiteQuestions(response.data.websiteQuestions);\n      setDemographicQuestions(response.data.demographicQuestions);\n      setLoading(false);\n    } catch (err) {\n      // More comprehensive error logging\n      console.error('Error fetching survey data:', err);\n\n      // Log specific error details\n      if (err.response) {\n        // The request was made and the server responded with a status code\n        console.error('Error response data:', err.response.data);\n        console.error('Error response status:', err.response.status);\n        console.error('Error response headers:', err.response.headers);\n      } else if (err.request) {\n        // The request was made but no response was received\n        console.error('No response received:', err.request);\n      } else {\n        // Something happened in setting up the request\n        console.error('Error setting up request:', err.message);\n      }\n      setError(`Kunne ikke indlæse spørgeskemadata: ${err.message}. Prøv venligst igen.`);\n      setLoading(false);\n    }\n  };\n\n  // Similar error handling for startNewSession\n  const startNewSession = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Force creation of a new session\n      localStorage.removeItem('surveySessionId');\n\n      // Use the current timestamp to ensure uniqueness\n      const timestamp = new Date().getTime();\n      console.log('Starting new survey session with timestamp:', timestamp);\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`, {\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Full Start Session Response:', response);\n      const {\n        sessionId\n      } = response.data;\n      console.log('Created new session:', sessionId);\n\n      // Store session ID in local storage\n      localStorage.setItem('surveySessionId', sessionId);\n      setSessionId(sessionId);\n      fetchSurveyData(sessionId);\n    } catch (err) {\n      console.error('Error starting session:', err);\n\n      // Detailed error logging\n      if (err.response) {\n        console.error('Error response data:', err.response.data);\n        console.error('Error response status:', err.response.status);\n      } else if (err.request) {\n        console.error('No response received:', err.request);\n      } else {\n        console.error('Error setting up request:', err.message);\n      }\n      setError(`Kunne ikke starte spørgeskemaet: ${err.message}. Prøv venligst igen.`);\n      setLoading(false);\n    }\n  }, []);\n\n  // ... rest of the component remains the same\n}\nexport default Survey;","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","Survey","fetchSurveyData","id","console","log","response","get","timeout","headers","websitesCount","data","websites","length","questionsCount","questions","demographicQuestionsCount","demographicQuestions","websiteQuestionsCount","websiteQuestions","setWebsites","setWebsiteQuestions","setDemographicQuestions","setLoading","err","error","status","request","message","setError","startNewSession","localStorage","removeItem","timestamp","Date","getTime","sessionId","setItem","setSessionId"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Survey() {\r\n  // ... existing state declarations\r\n\r\n  // Modify fetchSurveyData to include more robust error handling\r\n  const fetchSurveyData = async (id) => {\r\n    try {\r\n      console.log('Fetching survey data for session:', id);\r\n      \r\n      // Add more detailed error logging\r\n      const response = await axios.get(`/api/survey/questions/${id}`, {\r\n        // Add timeout and additional config\r\n        timeout: 10000, // 10 seconds timeout\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n      \r\n      // Log full response for debugging\r\n      console.log('Full API Response:', response);\r\n      \r\n      console.log('Survey data received:', {\r\n        websitesCount: response.data.websites.length,\r\n        questionsCount: response.data.questions.length,\r\n        demographicQuestionsCount: response.data.demographicQuestions.length,\r\n        websiteQuestionsCount: response.data.websiteQuestions.length\r\n      });\r\n      \r\n      setWebsites(response.data.websites);\r\n      setWebsiteQuestions(response.data.websiteQuestions);\r\n      setDemographicQuestions(response.data.demographicQuestions);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      // More comprehensive error logging\r\n      console.error('Error fetching survey data:', err);\r\n      \r\n      // Log specific error details\r\n      if (err.response) {\r\n        // The request was made and the server responded with a status code\r\n        console.error('Error response data:', err.response.data);\r\n        console.error('Error response status:', err.response.status);\r\n        console.error('Error response headers:', err.response.headers);\r\n      } else if (err.request) {\r\n        // The request was made but no response was received\r\n        console.error('No response received:', err.request);\r\n      } else {\r\n        // Something happened in setting up the request\r\n        console.error('Error setting up request:', err.message);\r\n      }\r\n      \r\n      setError(`Kunne ikke indlæse spørgeskemadata: ${err.message}. Prøv venligst igen.`);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Similar error handling for startNewSession\r\n  const startNewSession = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Force creation of a new session\r\n      localStorage.removeItem('surveySessionId');\r\n      \r\n      // Use the current timestamp to ensure uniqueness\r\n      const timestamp = new Date().getTime();\r\n      console.log('Starting new survey session with timestamp:', timestamp);\r\n      \r\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`, {\r\n        timeout: 10000,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n      \r\n      console.log('Full Start Session Response:', response);\r\n      \r\n      const { sessionId } = response.data;\r\n      \r\n      console.log('Created new session:', sessionId);\r\n      \r\n      // Store session ID in local storage\r\n      localStorage.setItem('surveySessionId', sessionId);\r\n      setSessionId(sessionId);\r\n      \r\n      fetchSurveyData(sessionId);\r\n    } catch (err) {\r\n      console.error('Error starting session:', err);\r\n      \r\n      // Detailed error logging\r\n      if (err.response) {\r\n        console.error('Error response data:', err.response.data);\r\n        console.error('Error response status:', err.response.status);\r\n      } else if (err.request) {\r\n        console.error('No response received:', err.request);\r\n      } else {\r\n        console.error('Error setting up request:', err.message);\r\n      }\r\n      \r\n      setError(`Kunne ikke starte spørgeskemaet: ${err.message}. Prøv venligst igen.`);\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // ... rest of the component remains the same\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}