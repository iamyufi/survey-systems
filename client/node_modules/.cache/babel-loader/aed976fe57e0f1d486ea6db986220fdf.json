{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\QuestionForm.js\";\n// client/src/components/QuestionForm.js\nimport React, { useState, useEffect } from 'react';\nimport Question from './Question';\nfunction QuestionForm({\n  questions,\n  onSubmit\n}) {\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [saveTimeout, setSaveTimeout] = useState(null);\n\n  // Effect to clean up timeout when component unmounts\n  useEffect(() => {\n    return () => {\n      if (saveTimeout) {\n        clearTimeout(saveTimeout);\n      }\n    };\n  }, [saveTimeout]);\n  const handleAnswerChange = (questionId, answer) => {\n    var _questions$find;\n    // Update the answers state immediately\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n\n    // Clear error if any\n    if (errors[questionId]) {\n      setErrors(prev => {\n        const newErrors = {\n          ...prev\n        };\n        delete newErrors[questionId];\n        return newErrors;\n      });\n    }\n\n    // For text inputs, use debouncing\n    const questionType = (_questions$find = questions.find(q => q['@_id'] === questionId)) === null || _questions$find === void 0 ? void 0 : _questions$find['@_type'];\n    if (questionType === 'text' || questionType === 'textarea') {\n      // Clear any existing timeout\n      if (saveTimeout) {\n        clearTimeout(saveTimeout);\n      }\n\n      // Set a new timeout - only save after 1 second of no typing\n      const timeoutId = setTimeout(() => {\n        console.log('Saving text input after debounce:', questionId);\n        onSubmit({\n          ...answers,\n          [questionId]: answer\n        }, true);\n      }, 1000);\n      setSaveTimeout(timeoutId);\n    } else {\n      // For non-text inputs, save immediately\n      console.log('Saving non-text input immediately:', questionId);\n      onSubmit({\n        ...answers,\n        [questionId]: answer\n      }, true);\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    let isValid = true;\n\n    // Check required fields\n    questions.forEach(question => {\n      if (question.obligatorisk === 'true' && (!answers[question['@_id']] || answers[question['@_id']] === '')) {\n        newErrors[question['@_id']] = 'Dette felt er påkrævet';\n        isValid = false;\n      }\n    });\n    setErrors(newErrors);\n    return isValid;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      return;\n    }\n    setIsSubmitting(true);\n\n    // Cancel any pending save timeouts\n    if (saveTimeout) {\n      clearTimeout(saveTimeout);\n      setSaveTimeout(null);\n    }\n\n    // Submit all answers as final submission\n    console.log('Submitting final answers');\n    onSubmit(answers, false);\n\n    // Reset submission state after a short delay\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"question-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, questions.map(question => /*#__PURE__*/React.createElement(\"div\", {\n    key: question['@_id'],\n    className: \"question-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Question, {\n    question: question,\n    onChange: answer => handleAnswerChange(question['@_id'], answer),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), errors[question['@_id']] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, errors[question['@_id']]))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"submit-button\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, isSubmitting ? 'Indsender...' : 'Indsend besvarelser'));\n}\nexport default QuestionForm;","map":{"version":3,"names":["React","useState","useEffect","Question","QuestionForm","questions","onSubmit","answers","setAnswers","errors","setErrors","isSubmitting","setIsSubmitting","saveTimeout","setSaveTimeout","clearTimeout","handleAnswerChange","questionId","answer","_questions$find","prev","newErrors","questionType","find","q","timeoutId","setTimeout","console","log","validateForm","isValid","forEach","question","obligatorisk","handleSubmit","e","preventDefault","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","key","onChange","type","disabled"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/QuestionForm.js"],"sourcesContent":["// client/src/components/QuestionForm.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Question from './Question';\r\n\r\nfunction QuestionForm({ questions, onSubmit }) {\r\n  const [answers, setAnswers] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [saveTimeout, setSaveTimeout] = useState(null);\r\n\r\n  // Effect to clean up timeout when component unmounts\r\n  useEffect(() => {\r\n    return () => {\r\n      if (saveTimeout) {\r\n        clearTimeout(saveTimeout);\r\n      }\r\n    };\r\n  }, [saveTimeout]);\r\n\r\n  const handleAnswerChange = (questionId, answer) => {\r\n    // Update the answers state immediately\r\n    setAnswers(prev => ({\r\n      ...prev,\r\n      [questionId]: answer\r\n    }));\r\n    \r\n    // Clear error if any\r\n    if (errors[questionId]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[questionId];\r\n        return newErrors;\r\n      });\r\n    }\r\n    \r\n    // For text inputs, use debouncing\r\n    const questionType = questions.find(q => q['@_id'] === questionId)?.['@_type'];\r\n    if (questionType === 'text' || questionType === 'textarea') {\r\n      // Clear any existing timeout\r\n      if (saveTimeout) {\r\n        clearTimeout(saveTimeout);\r\n      }\r\n      \r\n      // Set a new timeout - only save after 1 second of no typing\r\n      const timeoutId = setTimeout(() => {\r\n        console.log('Saving text input after debounce:', questionId);\r\n        onSubmit({...answers, [questionId]: answer}, true);\r\n      }, 1000);\r\n      \r\n      setSaveTimeout(timeoutId);\r\n    } else {\r\n      // For non-text inputs, save immediately\r\n      console.log('Saving non-text input immediately:', questionId);\r\n      onSubmit({...answers, [questionId]: answer}, true);\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n    \r\n    // Check required fields\r\n    questions.forEach(question => {\r\n      if (question.obligatorisk === 'true' && (!answers[question['@_id']] || answers[question['@_id']] === '')) {\r\n        newErrors[question['@_id']] = 'Dette felt er påkrævet';\r\n        isValid = false;\r\n      }\r\n    });\r\n    \r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    setIsSubmitting(true);\r\n    \r\n    // Cancel any pending save timeouts\r\n    if (saveTimeout) {\r\n      clearTimeout(saveTimeout);\r\n      setSaveTimeout(null);\r\n    }\r\n    \r\n    // Submit all answers as final submission\r\n    console.log('Submitting final answers');\r\n    onSubmit(answers, false);\r\n    \r\n    // Reset submission state after a short delay\r\n    setTimeout(() => {\r\n      setIsSubmitting(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"question-form\">\r\n      {questions.map(question => (\r\n        <div key={question['@_id']} className=\"question-container\">\r\n          <Question\r\n            question={question}\r\n            onChange={(answer) => handleAnswerChange(question['@_id'], answer)}\r\n          />\r\n          \r\n          {errors[question['@_id']] && (\r\n            <div className=\"error-text\">{errors[question['@_id']]}</div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      <button \r\n        type=\"submit\" \r\n        className=\"submit-button\"\r\n        disabled={isSubmitting}\r\n      >\r\n        {isSubmitting ? 'Indsender...' : 'Indsend besvarelser'}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default QuestionForm;"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AAEjC,SAASC,YAAYA,CAAC;EAAEC,SAAS;EAAEC;AAAS,CAAC,EAAE;EAC7C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIW,WAAW,EAAE;QACfE,YAAY,CAACF,WAAW,CAAC;MAC3B;IACF,CAAC;EACH,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMG,kBAAkB,GAAGA,CAACC,UAAU,EAAEC,MAAM,KAAK;IAAA,IAAAC,eAAA;IACjD;IACAX,UAAU,CAACY,IAAI,KAAK;MAClB,GAAGA,IAAI;MACP,CAACH,UAAU,GAAGC;IAChB,CAAC,CAAC,CAAC;;IAEH;IACA,IAAIT,MAAM,CAACQ,UAAU,CAAC,EAAE;MACtBP,SAAS,CAACU,IAAI,IAAI;QAChB,MAAMC,SAAS,GAAG;UAAE,GAAGD;QAAK,CAAC;QAC7B,OAAOC,SAAS,CAACJ,UAAU,CAAC;QAC5B,OAAOI,SAAS;MAClB,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMC,YAAY,IAAAH,eAAA,GAAGd,SAAS,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC,MAAM,CAAC,KAAKP,UAAU,CAAC,cAAAE,eAAA,uBAA7CA,eAAA,CAAgD,QAAQ,CAAC;IAC9E,IAAIG,YAAY,KAAK,MAAM,IAAIA,YAAY,KAAK,UAAU,EAAE;MAC1D;MACA,IAAIT,WAAW,EAAE;QACfE,YAAY,CAACF,WAAW,CAAC;MAC3B;;MAEA;MACA,MAAMY,SAAS,GAAGC,UAAU,CAAC,MAAM;QACjCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEX,UAAU,CAAC;QAC5DX,QAAQ,CAAC;UAAC,GAAGC,OAAO;UAAE,CAACU,UAAU,GAAGC;QAAM,CAAC,EAAE,IAAI,CAAC;MACpD,CAAC,EAAE,IAAI,CAAC;MAERJ,cAAc,CAACW,SAAS,CAAC;IAC3B,CAAC,MAAM;MACL;MACAE,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEX,UAAU,CAAC;MAC7DX,QAAQ,CAAC;QAAC,GAAGC,OAAO;QAAE,CAACU,UAAU,GAAGC;MAAM,CAAC,EAAE,IAAI,CAAC;IACpD;EACF,CAAC;EAED,MAAMW,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMR,SAAS,GAAG,CAAC,CAAC;IACpB,IAAIS,OAAO,GAAG,IAAI;;IAElB;IACAzB,SAAS,CAAC0B,OAAO,CAACC,QAAQ,IAAI;MAC5B,IAAIA,QAAQ,CAACC,YAAY,KAAK,MAAM,KAAK,CAAC1B,OAAO,CAACyB,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAIzB,OAAO,CAACyB,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;QACxGX,SAAS,CAACW,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,wBAAwB;QACtDF,OAAO,GAAG,KAAK;MACjB;IACF,CAAC,CAAC;IAEFpB,SAAS,CAACW,SAAS,CAAC;IACpB,OAAOS,OAAO;EAChB,CAAC;EAED,MAAMI,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAACP,YAAY,CAAC,CAAC,EAAE;MACnB;IACF;IAEAjB,eAAe,CAAC,IAAI,CAAC;;IAErB;IACA,IAAIC,WAAW,EAAE;MACfE,YAAY,CAACF,WAAW,CAAC;MACzBC,cAAc,CAAC,IAAI,CAAC;IACtB;;IAEA;IACAa,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCtB,QAAQ,CAACC,OAAO,EAAE,KAAK,CAAC;;IAExB;IACAmB,UAAU,CAAC,MAAM;MACfd,eAAe,CAAC,KAAK,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEZ,KAAA,CAAAqC,aAAA;IAAM/B,QAAQ,EAAE4B,YAAa;IAACI,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACpDvC,SAAS,CAACwC,GAAG,CAACb,QAAQ,iBACrBhC,KAAA,CAAAqC,aAAA;IAAKS,GAAG,EAAEd,QAAQ,CAAC,MAAM,CAAE;IAACM,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACxD5C,KAAA,CAAAqC,aAAA,CAAClC,QAAQ;IACP6B,QAAQ,EAAEA,QAAS;IACnBe,QAAQ,EAAG7B,MAAM,IAAKF,kBAAkB,CAACgB,QAAQ,CAAC,MAAM,CAAC,EAAEd,MAAM,CAAE;IAAAqB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACpE,CAAC,EAEDnC,MAAM,CAACuB,QAAQ,CAAC,MAAM,CAAC,CAAC,iBACvBhC,KAAA,CAAAqC,aAAA;IAAKC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEnC,MAAM,CAACuB,QAAQ,CAAC,MAAM,CAAC,CAAO,CAE1D,CACN,CAAC,eAEFhC,KAAA,CAAAqC,aAAA;IACEW,IAAI,EAAC,QAAQ;IACbV,SAAS,EAAC,eAAe;IACzBW,QAAQ,EAAEtC,YAAa;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEtBjC,YAAY,GAAG,cAAc,GAAG,qBAC3B,CACJ,CAAC;AAEX;AAEA,eAAeP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}