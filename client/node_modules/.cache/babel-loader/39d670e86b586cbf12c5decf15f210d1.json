{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\Survey.js\";\n// client/src/components/Survey.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport WebsiteDisplay from './WebsiteDisplay';\nimport QuestionForm from './QuestionForm';\nimport WelcomeSurvey from './WelcomeSurvey';\nimport FarewellScreen from './FarewellScreen';\nimport axios from 'axios';\nfunction Survey() {\n  const [sessionId, setSessionId] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [websites, setWebsites] = useState([]);\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\n  const [showSurvey, setShowSurvey] = useState(false);\n  const [viewStartTime, setViewStartTime] = useState(null);\n  const [surveyStep, setSurveyStep] = useState('welcome'); // 'welcome', 'websites', 'farewell'\n\n  // Use useCallback to prevent unnecessary recreation of this function\n  const startNewSession = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Force creation of a new session\n      localStorage.removeItem('surveySessionId');\n\n      // Use the current timestamp to ensure uniqueness\n      const timestamp = new Date().getTime();\n      console.log('Starting new survey session with timestamp:', timestamp);\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`);\n      const {\n        sessionId\n      } = response.data;\n      console.log('Created new session:', sessionId);\n\n      // Store session ID in local storage\n      localStorage.setItem('surveySessionId', sessionId);\n      setSessionId(sessionId);\n      fetchSurveyData(sessionId);\n    } catch (err) {\n      console.error('Error starting session:', err);\n      setError('Kunne ikke starte spørgeskemaet. Prøv venligst igen.');\n      setLoading(false);\n    }\n  }, []);\n  const fetchSurveyData = async id => {\n    try {\n      console.log('Fetching survey data for session:', id);\n      const response = await axios.get(`/api/survey/questions/${id}`);\n      console.log('Survey data received:', {\n        websitesCount: response.data.websites.length,\n        questionsCount: response.data.questions.length,\n        demographicQuestionsCount: response.data.demographicQuestions.length,\n        websiteQuestionsCount: response.data.websiteQuestions.length\n      });\n      setWebsites(response.data.websites);\n      setWebsiteQuestions(response.data.websiteQuestions);\n      setDemographicQuestions(response.data.demographicQuestions);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching survey data:', err);\n      setError('Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.');\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    // Check if we have a session ID already\n    const existingSessionId = localStorage.getItem('surveySessionId');\n    if (existingSessionId) {\n      console.log('Resuming existing session:', existingSessionId);\n      setSessionId(existingSessionId);\n      fetchSurveyData(existingSessionId);\n    } else {\n      // Only start a new session if we don't have one\n      console.log('No existing session found, creating new one');\n      startNewSession();\n    }\n  }, [startNewSession]); // Add startNewSession as a dependency\n\n  // Add an effect to handle page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      // Complete the survey if user leaves\n      const currentSessionId = localStorage.getItem('surveySessionId');\n      if (currentSessionId) {\n        try {\n          // Use sendBeacon for more reliable sending during page unload\n          const data = new Blob([JSON.stringify({})], {\n            type: 'application/json'\n          });\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\n          console.log('Survey completed via beforeunload event');\n        } catch (e) {\n          console.error('Error completing survey on unload:', e);\n        }\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  const handleDemographicsComplete = () => {\n    console.log('Demographics complete, moving to websites step');\n    setSurveyStep('websites');\n    setViewStartTime(new Date());\n  };\n  const handleShowSurvey = () => {\n    console.log('Showing survey for website:', currentWebsiteIndex + 1);\n    setShowSurvey(true);\n  };\n  const handleSubmitAnswers = async (answers, isPartial = false) => {\n    try {\n      const viewEndTime = new Date();\n      const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds\n      const currentWebsite = websites[currentWebsiteIndex];\n      console.log(`${isPartial ? 'Saving partial' : 'Submitting final'} answers for website:`, currentWebsite['@_id']);\n      console.log('Answers data:', answers);\n\n      // Save answers\n      const response = await axios.post(`/api/survey/submit/${sessionId}`, {\n        websiteId: currentWebsite['@_id'],\n        answers,\n        viewTime,\n        partial: isPartial\n      });\n      console.log('Submit response:', response.data);\n\n      // Only proceed to next step for final submissions (not partial ones)\n      if (!isPartial) {\n        // Move to next website or complete survey\n        if (currentWebsiteIndex < websites.length - 1) {\n          setCurrentWebsiteIndex(currentWebsiteIndex + 1);\n          setShowSurvey(false);\n          setViewStartTime(new Date());\n        } else {\n          // Explicitly complete the survey\n          try {\n            const completeResponse = await axios.post(`/api/survey/complete/${sessionId}`);\n            console.log('Survey completed successfully:', completeResponse.data);\n          } catch (completeErr) {\n            console.error('Error marking survey as complete:', completeErr);\n          }\n          setSurveyStep('farewell');\n\n          // Start fresh for next user\n          localStorage.removeItem('surveySessionId');\n        }\n      }\n    } catch (err) {\n      console.error('Error submitting answers:', err);\n      setError('Kunne ikke indsende svar. Prøv venligst igen.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 12\n      }\n    }, \"Indl\\xE6ser sp\\xF8rgeskema...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 12\n      }\n    }, error);\n  }\n\n  // Render different steps of the survey\n  if (surveyStep === 'welcome') {\n    return /*#__PURE__*/React.createElement(WelcomeSurvey, {\n      sessionId: sessionId,\n      onComplete: handleDemographicsComplete,\n      demographicQuestions: demographicQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    });\n  }\n  if (surveyStep === 'farewell') {\n    return /*#__PURE__*/React.createElement(FarewellScreen, {\n      sessionId: sessionId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 12\n      }\n    });\n  }\n\n  // Website survey flow\n  const currentWebsite = websites[currentWebsiteIndex];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"survey-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, !showSurvey ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"website-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WebsiteDisplay, {\n    website: currentWebsite,\n    onShowSurvey: handleShowSurvey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, \"Sp\\xF8rgsm\\xE5l om hjemmesiden\"), /*#__PURE__*/React.createElement(QuestionForm, {\n    questions: websiteQuestions,\n    onSubmit: handleSubmitAnswers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, \"Hjemmeside \", currentWebsiteIndex + 1, \" af \", websites.length));\n}\nexport default Survey;","map":{"version":3,"names":["React","useState","useEffect","useCallback","WebsiteDisplay","QuestionForm","WelcomeSurvey","FarewellScreen","axios","Survey","sessionId","setSessionId","loading","setLoading","error","setError","websites","setWebsites","websiteQuestions","setWebsiteQuestions","demographicQuestions","setDemographicQuestions","currentWebsiteIndex","setCurrentWebsiteIndex","showSurvey","setShowSurvey","viewStartTime","setViewStartTime","surveyStep","setSurveyStep","startNewSession","localStorage","removeItem","timestamp","Date","getTime","console","log","response","get","data","setItem","fetchSurveyData","err","id","websitesCount","length","questionsCount","questions","demographicQuestionsCount","websiteQuestionsCount","existingSessionId","getItem","handleBeforeUnload","currentSessionId","Blob","JSON","stringify","type","navigator","sendBeacon","e","window","addEventListener","removeEventListener","handleDemographicsComplete","handleShowSurvey","handleSubmitAnswers","answers","isPartial","viewEndTime","viewTime","currentWebsite","post","websiteId","partial","completeResponse","completeErr","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onComplete","website","onShowSurvey","onSubmit"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/Survey.js"],"sourcesContent":["// client/src/components/Survey.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport WebsiteDisplay from './WebsiteDisplay';\r\nimport QuestionForm from './QuestionForm';\r\nimport WelcomeSurvey from './WelcomeSurvey';\r\nimport FarewellScreen from './FarewellScreen';\r\nimport axios from 'axios';\r\n\r\nfunction Survey() {\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [websites, setWebsites] = useState([]);\r\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\r\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\r\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\r\n  const [showSurvey, setShowSurvey] = useState(false);\r\n  const [viewStartTime, setViewStartTime] = useState(null);\r\n  const [surveyStep, setSurveyStep] = useState('welcome'); // 'welcome', 'websites', 'farewell'\r\n\r\n  // Use useCallback to prevent unnecessary recreation of this function\r\n  const startNewSession = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Force creation of a new session\r\n      localStorage.removeItem('surveySessionId');\r\n      \r\n      // Use the current timestamp to ensure uniqueness\r\n      const timestamp = new Date().getTime();\r\n      console.log('Starting new survey session with timestamp:', timestamp);\r\n      \r\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`);\r\n      const { sessionId } = response.data;\r\n      \r\n      console.log('Created new session:', sessionId);\r\n      \r\n      // Store session ID in local storage\r\n      localStorage.setItem('surveySessionId', sessionId);\r\n      setSessionId(sessionId);\r\n      \r\n      fetchSurveyData(sessionId);\r\n    } catch (err) {\r\n      console.error('Error starting session:', err);\r\n      setError('Kunne ikke starte spørgeskemaet. Prøv venligst igen.');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchSurveyData = async (id) => {\r\n    try {\r\n      console.log('Fetching survey data for session:', id);\r\n      const response = await axios.get(`/api/survey/questions/${id}`);\r\n      \r\n      console.log('Survey data received:', {\r\n        websitesCount: response.data.websites.length,\r\n        questionsCount: response.data.questions.length,\r\n        demographicQuestionsCount: response.data.demographicQuestions.length,\r\n        websiteQuestionsCount: response.data.websiteQuestions.length\r\n      });\r\n      \r\n      setWebsites(response.data.websites);\r\n      setWebsiteQuestions(response.data.websiteQuestions);\r\n      setDemographicQuestions(response.data.demographicQuestions);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching survey data:', err);\r\n      setError('Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if we have a session ID already\r\n    const existingSessionId = localStorage.getItem('surveySessionId');\r\n    \r\n    if (existingSessionId) {\r\n      console.log('Resuming existing session:', existingSessionId);\r\n      setSessionId(existingSessionId);\r\n      fetchSurveyData(existingSessionId);\r\n    } else {\r\n      // Only start a new session if we don't have one\r\n      console.log('No existing session found, creating new one');\r\n      startNewSession();\r\n    }\r\n  }, [startNewSession]); // Add startNewSession as a dependency\r\n\r\n  // Add an effect to handle page unload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      // Complete the survey if user leaves\r\n      const currentSessionId = localStorage.getItem('surveySessionId');\r\n      if (currentSessionId) {\r\n        try {\r\n          // Use sendBeacon for more reliable sending during page unload\r\n          const data = new Blob([JSON.stringify({})], { type: 'application/json' });\r\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\r\n          console.log('Survey completed via beforeunload event');\r\n        } catch (e) {\r\n          console.error('Error completing survey on unload:', e);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    \r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  const handleDemographicsComplete = () => {\r\n    console.log('Demographics complete, moving to websites step');\r\n    setSurveyStep('websites');\r\n    setViewStartTime(new Date());\r\n  };\r\n\r\n  const handleShowSurvey = () => {\r\n    console.log('Showing survey for website:', currentWebsiteIndex + 1);\r\n    setShowSurvey(true);\r\n  };\r\n\r\n  const handleSubmitAnswers = async (answers, isPartial = false) => {\r\n    try {\r\n      const viewEndTime = new Date();\r\n      const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds\r\n      const currentWebsite = websites[currentWebsiteIndex];\r\n      \r\n      console.log(`${isPartial ? 'Saving partial' : 'Submitting final'} answers for website:`, currentWebsite['@_id']);\r\n      console.log('Answers data:', answers);\r\n      \r\n      // Save answers\r\n      const response = await axios.post(`/api/survey/submit/${sessionId}`, {\r\n        websiteId: currentWebsite['@_id'],\r\n        answers,\r\n        viewTime,\r\n        partial: isPartial\r\n      });\r\n      \r\n      console.log('Submit response:', response.data);\r\n      \r\n      // Only proceed to next step for final submissions (not partial ones)\r\n      if (!isPartial) {\r\n        // Move to next website or complete survey\r\n        if (currentWebsiteIndex < websites.length - 1) {\r\n          setCurrentWebsiteIndex(currentWebsiteIndex + 1);\r\n          setShowSurvey(false);\r\n          setViewStartTime(new Date());\r\n        } else {\r\n          // Explicitly complete the survey\r\n          try {\r\n            const completeResponse = await axios.post(`/api/survey/complete/${sessionId}`);\r\n            console.log('Survey completed successfully:', completeResponse.data);\r\n          } catch (completeErr) {\r\n            console.error('Error marking survey as complete:', completeErr);\r\n          }\r\n          \r\n          setSurveyStep('farewell');\r\n          \r\n          // Start fresh for next user\r\n          localStorage.removeItem('surveySessionId');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error submitting answers:', err);\r\n      setError('Kunne ikke indsende svar. Prøv venligst igen.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Indlæser spørgeskema...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  // Render different steps of the survey\r\n  if (surveyStep === 'welcome') {\r\n    return (\r\n      <WelcomeSurvey \r\n        sessionId={sessionId}\r\n        onComplete={handleDemographicsComplete}\r\n        demographicQuestions={demographicQuestions}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (surveyStep === 'farewell') {\r\n    return <FarewellScreen sessionId={sessionId} />;\r\n  }\r\n\r\n  // Website survey flow\r\n  const currentWebsite = websites[currentWebsiteIndex];\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      {!showSurvey ? (\r\n        <div className=\"website-view\">\r\n          <WebsiteDisplay\r\n            website={currentWebsite}\r\n            onShowSurvey={handleShowSurvey}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className=\"question-form\">\r\n          <h2>Spørgsmål om hjemmesiden</h2>\r\n          <QuestionForm\r\n            questions={websiteQuestions}\r\n            onSubmit={handleSubmitAnswers}\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"progress\">\r\n        Hjemmeside {currentWebsiteIndex + 1} af {websites.length}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}