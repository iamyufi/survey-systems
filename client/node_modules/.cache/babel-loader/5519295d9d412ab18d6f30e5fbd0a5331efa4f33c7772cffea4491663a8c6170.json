{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\Survey.js\",\n  _s = $RefreshSig$();\n// client/src/components/Survey.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport WebsiteDisplay from './WebsiteDisplay';\nimport QuestionForm from './QuestionForm';\nimport WelcomeSurvey from './WelcomeSurvey';\nimport FarewellScreen from './FarewellScreen';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Survey() {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [websites, setWebsites] = useState([]);\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\n  const [showSurvey, setShowSurvey] = useState(false);\n  const [viewStartTime, setViewStartTime] = useState(null);\n  const [surveyStep, setSurveyStep] = useState('welcome'); // 'welcome', 'websites', 'farewell'\n  const [currentAnswers, setCurrentAnswers] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveQueue, setSaveQueue] = useState([]);\n\n  // Use useCallback to prevent unnecessary recreation of this function\n  const startNewSession = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Force creation of a new session\n      localStorage.removeItem('surveySessionId');\n\n      // Use the current timestamp to ensure uniqueness\n      const timestamp = new Date().getTime();\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`);\n      const {\n        sessionId\n      } = response.data;\n      console.log('Created new session:', sessionId);\n\n      // Store session ID in local storage\n      localStorage.setItem('surveySessionId', sessionId);\n      setSessionId(sessionId);\n      fetchSurveyData(sessionId);\n    } catch (err) {\n      console.error('Error starting session:', err);\n      setError('Kunne ikke starte spørgeskemaet. Prøv venligst igen.');\n      setLoading(false);\n    }\n  }, []);\n  const fetchSurveyData = async id => {\n    try {\n      const response = await axios.get(`/api/survey/questions/${id}`);\n      setWebsites(response.data.websites);\n      setWebsiteQuestions(response.data.websiteQuestions);\n      setDemographicQuestions(response.data.demographicQuestions);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching survey data:', err);\n      setError('Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.');\n      setLoading(false);\n    }\n  };\n\n  // Process the save queue\n  useEffect(() => {\n    const processSaveQueue = async () => {\n      if (saveQueue.length > 0 && !isSaving) {\n        setIsSaving(true);\n        try {\n          // Take the latest answers from the queue\n          const latestAnswers = saveQueue[saveQueue.length - 1];\n          if (sessionId && currentWebsiteIndex >= 0 && websites.length > 0) {\n            const viewTime = (new Date() - viewStartTime) / 1000; // in seconds\n            const currentWebsite = websites[currentWebsiteIndex];\n            await axios.post(`/api/survey/submit/${sessionId}`, {\n              websiteId: currentWebsite['@_id'],\n              answers: latestAnswers,\n              viewTime,\n              partial: true // Indicate this is a partial submission\n            });\n            console.log('Saved answer in real-time');\n          }\n        } catch (err) {\n          console.error('Error saving answer in real-time:', err);\n        } finally {\n          // Clear the queue and reset saving state\n          setSaveQueue([]);\n          setIsSaving(false);\n        }\n      }\n    };\n    processSaveQueue();\n  }, [saveQueue, isSaving, sessionId, currentWebsiteIndex, websites, viewStartTime]);\n  useEffect(() => {\n    // Always start a new session when the component mounts\n    startNewSession();\n\n    // Cleanup function to run when component unmounts or before re-running effect\n    return () => {\n      console.log('Cleaning up survey session');\n    };\n  }, [startNewSession]); // Add startNewSession as a dependency\n\n  // Add an effect to handle page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      // Complete the survey if user leaves\n      const currentSessionId = localStorage.getItem('surveySessionId');\n      if (currentSessionId) {\n        try {\n          // Use sendBeacon for more reliable sending during page unload\n          const data = JSON.stringify({});\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\n        } catch (e) {\n          console.error('Error completing survey on unload:', e);\n        }\n        localStorage.removeItem('surveySessionId');\n      }\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  const handleDemographicsComplete = () => {\n    setSurveyStep('websites');\n    setViewStartTime(new Date());\n    setCurrentAnswers({});\n  };\n  const handleShowSurvey = () => {\n    setShowSurvey(true);\n  };\n  const handleQuestionAnswer = answers => {\n    // Store the current state of answers\n    setCurrentAnswers(answers);\n\n    // Add to save queue for processing\n    setSaveQueue(prev => [...prev, answers]);\n  };\n  const handleSubmitAllAnswers = async answers => {\n    try {\n      const viewEndTime = new Date();\n      const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds\n      const currentWebsite = websites[currentWebsiteIndex];\n      console.log('Submitting final answers for website:', currentWebsite['@_id']);\n\n      // Save final answers for current website\n      await axios.post(`/api/survey/submit/${sessionId}`, {\n        websiteId: currentWebsite['@_id'],\n        answers,\n        viewTime,\n        partial: false // This is a complete submission\n      });\n\n      // Move to next website or complete survey\n      if (currentWebsiteIndex < websites.length - 1) {\n        setCurrentWebsiteIndex(currentWebsiteIndex + 1);\n        setShowSurvey(false);\n        setViewStartTime(new Date());\n        setCurrentAnswers({}); // Reset answers for next website\n      } else {\n        // Explicitly complete the survey\n        try {\n          await axios.post(`/api/survey/complete/${sessionId}`);\n          console.log('Survey completed successfully');\n        } catch (completeErr) {\n          console.error('Error marking survey as complete:', completeErr);\n        }\n        setSurveyStep('farewell');\n\n        // Start fresh for next user\n        localStorage.removeItem('surveySessionId');\n      }\n    } catch (err) {\n      console.error('Error submitting final answers:', err);\n      setError('Kunne ikke indsende svar. Prøv venligst igen.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Indl\\xE6ser sp\\xF8rgeskema...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render different steps of the survey\n  if (surveyStep === 'welcome') {\n    return /*#__PURE__*/_jsxDEV(WelcomeSurvey, {\n      sessionId: sessionId,\n      onComplete: handleDemographicsComplete,\n      demographicQuestions: demographicQuestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this);\n  }\n  if (surveyStep === 'farewell') {\n    return /*#__PURE__*/_jsxDEV(FarewellScreen, {\n      sessionId: sessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Website survey flow\n  const currentWebsite = websites[currentWebsiteIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey-container\",\n    children: [!showSurvey ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"website-view\",\n      children: /*#__PURE__*/_jsxDEV(WebsiteDisplay, {\n        website: currentWebsite,\n        onShowSurvey: handleShowSurvey\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sp\\xF8rgsm\\xE5l om hjemmesiden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QuestionForm, {\n        questions: websiteQuestions,\n        onSubmit: handleSubmitAllAnswers // For the final form submission\n        ,\n        onChange: handleQuestionAnswer // For individual question changes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [\"Hjemmeside \", currentWebsiteIndex + 1, \" af \", websites.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"8i4+wpSSasjAkLeBHlNgmoWm4LQ=\");\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","WebsiteDisplay","QuestionForm","WelcomeSurvey","FarewellScreen","axios","jsxDEV","_jsxDEV","Survey","_s","sessionId","setSessionId","loading","setLoading","error","setError","websites","setWebsites","websiteQuestions","setWebsiteQuestions","demographicQuestions","setDemographicQuestions","currentWebsiteIndex","setCurrentWebsiteIndex","showSurvey","setShowSurvey","viewStartTime","setViewStartTime","surveyStep","setSurveyStep","currentAnswers","setCurrentAnswers","isSaving","setIsSaving","saveQueue","setSaveQueue","startNewSession","localStorage","removeItem","timestamp","Date","getTime","response","get","data","console","log","setItem","fetchSurveyData","err","id","processSaveQueue","length","latestAnswers","viewTime","currentWebsite","post","websiteId","answers","partial","handleBeforeUnload","currentSessionId","getItem","JSON","stringify","navigator","sendBeacon","e","window","addEventListener","removeEventListener","handleDemographicsComplete","handleShowSurvey","handleQuestionAnswer","prev","handleSubmitAllAnswers","viewEndTime","completeErr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onComplete","website","onShowSurvey","questions","onSubmit","onChange","_c","$RefreshReg$"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/Survey.js"],"sourcesContent":["// client/src/components/Survey.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport WebsiteDisplay from './WebsiteDisplay';\r\nimport QuestionForm from './QuestionForm';\r\nimport WelcomeSurvey from './WelcomeSurvey';\r\nimport FarewellScreen from './FarewellScreen';\r\nimport axios from 'axios';\r\n\r\nfunction Survey() {\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [websites, setWebsites] = useState([]);\r\n  const [websiteQuestions, setWebsiteQuestions] = useState([]);\r\n  const [demographicQuestions, setDemographicQuestions] = useState([]);\r\n  const [currentWebsiteIndex, setCurrentWebsiteIndex] = useState(0);\r\n  const [showSurvey, setShowSurvey] = useState(false);\r\n  const [viewStartTime, setViewStartTime] = useState(null);\r\n  const [surveyStep, setSurveyStep] = useState('welcome'); // 'welcome', 'websites', 'farewell'\r\n  const [currentAnswers, setCurrentAnswers] = useState({});\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [saveQueue, setSaveQueue] = useState([]);\r\n\r\n  // Use useCallback to prevent unnecessary recreation of this function\r\n  const startNewSession = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Force creation of a new session\r\n      localStorage.removeItem('surveySessionId');\r\n      \r\n      // Use the current timestamp to ensure uniqueness\r\n      const timestamp = new Date().getTime();\r\n      const response = await axios.get(`/api/survey/start?timestamp=${timestamp}`);\r\n      const { sessionId } = response.data;\r\n      \r\n      console.log('Created new session:', sessionId);\r\n      \r\n      // Store session ID in local storage\r\n      localStorage.setItem('surveySessionId', sessionId);\r\n      setSessionId(sessionId);\r\n      \r\n      fetchSurveyData(sessionId);\r\n    } catch (err) {\r\n      console.error('Error starting session:', err);\r\n      setError('Kunne ikke starte spørgeskemaet. Prøv venligst igen.');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchSurveyData = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/survey/questions/${id}`);\r\n      \r\n      setWebsites(response.data.websites);\r\n      setWebsiteQuestions(response.data.websiteQuestions);\r\n      setDemographicQuestions(response.data.demographicQuestions);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching survey data:', err);\r\n      setError('Kunne ikke indlæse spørgeskemadata. Prøv venligst igen.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Process the save queue\r\n  useEffect(() => {\r\n    const processSaveQueue = async () => {\r\n      if (saveQueue.length > 0 && !isSaving) {\r\n        setIsSaving(true);\r\n        \r\n        try {\r\n          // Take the latest answers from the queue\r\n          const latestAnswers = saveQueue[saveQueue.length - 1];\r\n          \r\n          if (sessionId && currentWebsiteIndex >= 0 && websites.length > 0) {\r\n            const viewTime = (new Date() - viewStartTime) / 1000; // in seconds\r\n            const currentWebsite = websites[currentWebsiteIndex];\r\n            \r\n            await axios.post(`/api/survey/submit/${sessionId}`, {\r\n              websiteId: currentWebsite['@_id'],\r\n              answers: latestAnswers,\r\n              viewTime,\r\n              partial: true // Indicate this is a partial submission\r\n            });\r\n            \r\n            console.log('Saved answer in real-time');\r\n          }\r\n        } catch (err) {\r\n          console.error('Error saving answer in real-time:', err);\r\n        } finally {\r\n          // Clear the queue and reset saving state\r\n          setSaveQueue([]);\r\n          setIsSaving(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    processSaveQueue();\r\n  }, [saveQueue, isSaving, sessionId, currentWebsiteIndex, websites, viewStartTime]);\r\n\r\n  useEffect(() => {\r\n    // Always start a new session when the component mounts\r\n    startNewSession();\r\n    \r\n    // Cleanup function to run when component unmounts or before re-running effect\r\n    return () => {\r\n      console.log('Cleaning up survey session');\r\n    };\r\n  }, [startNewSession]); // Add startNewSession as a dependency\r\n\r\n  // Add an effect to handle page unload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      // Complete the survey if user leaves\r\n      const currentSessionId = localStorage.getItem('surveySessionId');\r\n      if (currentSessionId) {\r\n        try {\r\n          // Use sendBeacon for more reliable sending during page unload\r\n          const data = JSON.stringify({});\r\n          navigator.sendBeacon(`/api/survey/complete/${currentSessionId}`, data);\r\n        } catch (e) {\r\n          console.error('Error completing survey on unload:', e);\r\n        }\r\n        localStorage.removeItem('surveySessionId');\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    \r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  const handleDemographicsComplete = () => {\r\n    setSurveyStep('websites');\r\n    setViewStartTime(new Date());\r\n    setCurrentAnswers({});\r\n  };\r\n\r\n  const handleShowSurvey = () => {\r\n    setShowSurvey(true);\r\n  };\r\n\r\n  const handleQuestionAnswer = (answers) => {\r\n    // Store the current state of answers\r\n    setCurrentAnswers(answers);\r\n    \r\n    // Add to save queue for processing\r\n    setSaveQueue(prev => [...prev, answers]);\r\n  };\r\n\r\n  const handleSubmitAllAnswers = async (answers) => {\r\n    try {\r\n      const viewEndTime = new Date();\r\n      const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds\r\n      const currentWebsite = websites[currentWebsiteIndex];\r\n      \r\n      console.log('Submitting final answers for website:', currentWebsite['@_id']);\r\n      \r\n      // Save final answers for current website\r\n      await axios.post(`/api/survey/submit/${sessionId}`, {\r\n        websiteId: currentWebsite['@_id'],\r\n        answers,\r\n        viewTime,\r\n        partial: false // This is a complete submission\r\n      });\r\n      \r\n      // Move to next website or complete survey\r\n      if (currentWebsiteIndex < websites.length - 1) {\r\n        setCurrentWebsiteIndex(currentWebsiteIndex + 1);\r\n        setShowSurvey(false);\r\n        setViewStartTime(new Date());\r\n        setCurrentAnswers({}); // Reset answers for next website\r\n      } else {\r\n        // Explicitly complete the survey\r\n        try {\r\n          await axios.post(`/api/survey/complete/${sessionId}`);\r\n          console.log('Survey completed successfully');\r\n        } catch (completeErr) {\r\n          console.error('Error marking survey as complete:', completeErr);\r\n        }\r\n        \r\n        setSurveyStep('farewell');\r\n        \r\n        // Start fresh for next user\r\n        localStorage.removeItem('surveySessionId');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error submitting final answers:', err);\r\n      setError('Kunne ikke indsende svar. Prøv venligst igen.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Indlæser spørgeskema...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  // Render different steps of the survey\r\n  if (surveyStep === 'welcome') {\r\n    return (\r\n      <WelcomeSurvey \r\n        sessionId={sessionId}\r\n        onComplete={handleDemographicsComplete}\r\n        demographicQuestions={demographicQuestions}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (surveyStep === 'farewell') {\r\n    return <FarewellScreen sessionId={sessionId} />;\r\n  }\r\n\r\n  // Website survey flow\r\n  const currentWebsite = websites[currentWebsiteIndex];\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      {!showSurvey ? (\r\n        <div className=\"website-view\">\r\n          <WebsiteDisplay\r\n            website={currentWebsite}\r\n            onShowSurvey={handleShowSurvey}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className=\"question-form\">\r\n          <h2>Spørgsmål om hjemmesiden</h2>\r\n          <QuestionForm\r\n            questions={websiteQuestions}\r\n            onSubmit={handleSubmitAllAnswers} // For the final form submission\r\n            onChange={handleQuestionAnswer} // For individual question changes\r\n          />\r\n        </div>\r\n      )}\r\n      <div className=\"progress\">\r\n        Hjemmeside {currentWebsiteIndex + 1} af {websites.length}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}