{"ast":null,"code":"var _jsxFileName = \"Z:\\\\Documents\\\\IBA\\\\webdev\\\\sporgeskema-system\\\\client\\\\src\\\\components\\\\QuestionForm.js\",\n  _s = $RefreshSig$();\n// client/src/components/QuestionForm.js\nimport React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionForm({\n  questions,\n  onSubmit\n}) {\n  _s();\n  const [answers, setAnswers] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [lastUpdatedQuestion, setLastUpdatedQuestion] = useState(null);\n  const [saveTimeout, setSaveTimeout] = useState(null);\n\n  // Effect to submit answers when they change\n  useEffect(() => {\n    if (lastUpdatedQuestion && Object.keys(answers).length > 0) {\n      // Clear any existing timeout\n      if (saveTimeout) {\n        clearTimeout(saveTimeout);\n      }\n\n      // Set a short delay to prevent too many submissions\n      const timeoutId = setTimeout(() => {\n        // Submit the answers to the parent component\n        onSubmit(answers);\n        setLastUpdatedQuestion(null);\n      }, 500); // 500ms delay\n\n      setSaveTimeout(timeoutId);\n    }\n\n    // Cleanup timeout on unmount\n    return () => {\n      if (saveTimeout) {\n        clearTimeout(saveTimeout);\n      }\n    };\n  }, [answers, lastUpdatedQuestion, onSubmit, saveTimeout]);\n  const handleAnswerChange = (questionId, answer) => {\n    // Update the answers state\n    setAnswers(prev => {\n      const newAnswers = {\n        ...prev,\n        [questionId]: answer\n      };\n\n      // Track which question was just updated\n      setLastUpdatedQuestion(questionId);\n      return newAnswers;\n    });\n\n    // Clear error for this question if it exists\n    if (errors[questionId]) {\n      setErrors(prev => {\n        const newErrors = {\n          ...prev\n        };\n        delete newErrors[questionId];\n        return newErrors;\n      });\n    }\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    let isValid = true;\n\n    // Check required fields\n    questions.forEach(question => {\n      if (question.obligatorisk === 'true' && (!answers[question['@_id']] || answers[question['@_id']] === '')) {\n        newErrors[question['@_id']] = 'Dette felt er påkrævet';\n        isValid = false;\n      }\n    });\n    setErrors(newErrors);\n    return isValid;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      return;\n    }\n    setIsSubmitting(true);\n\n    // Submit all answers as final answers\n    onSubmit(answers, false); // false indicates this is a final submission, not a partial one\n\n    // Reset submission state after a short delay\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"question-form\",\n    children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        onChange: answer => handleAnswerChange(question['@_id'], answer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), errors[question['@_id']] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-text\",\n        children: errors[question['@_id']]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, question['@_id'], true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"submit-button\",\n      disabled: isSubmitting,\n      children: isSubmitting ? 'Indsender...' : 'Indsend besvarelser'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionForm, \"7eXuYwtALWmo/DsgzpMFLGddC80=\");\n_c = QuestionForm;\nexport default QuestionForm;\nvar _c;\n$RefreshReg$(_c, \"QuestionForm\");","map":{"version":3,"names":["React","useState","useEffect","Question","jsxDEV","_jsxDEV","QuestionForm","questions","onSubmit","_s","answers","setAnswers","errors","setErrors","isSubmitting","setIsSubmitting","lastUpdatedQuestion","setLastUpdatedQuestion","saveTimeout","setSaveTimeout","Object","keys","length","clearTimeout","timeoutId","setTimeout","handleAnswerChange","questionId","answer","prev","newAnswers","newErrors","validateForm","isValid","forEach","question","obligatorisk","handleSubmit","e","preventDefault","className","children","map","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","$RefreshReg$"],"sources":["Z:/Documents/IBA/webdev/sporgeskema-system/client/src/components/QuestionForm.js"],"sourcesContent":["// client/src/components/QuestionForm.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Question from './Question';\r\n\r\nfunction QuestionForm({ questions, onSubmit }) {\r\n  const [answers, setAnswers] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [lastUpdatedQuestion, setLastUpdatedQuestion] = useState(null);\r\n  const [saveTimeout, setSaveTimeout] = useState(null);\r\n\r\n  // Effect to submit answers when they change\r\n  useEffect(() => {\r\n    if (lastUpdatedQuestion && Object.keys(answers).length > 0) {\r\n      // Clear any existing timeout\r\n      if (saveTimeout) {\r\n        clearTimeout(saveTimeout);\r\n      }\r\n      \r\n      // Set a short delay to prevent too many submissions\r\n      const timeoutId = setTimeout(() => {\r\n        // Submit the answers to the parent component\r\n        onSubmit(answers);\r\n        setLastUpdatedQuestion(null);\r\n      }, 500); // 500ms delay\r\n      \r\n      setSaveTimeout(timeoutId);\r\n    }\r\n    \r\n    // Cleanup timeout on unmount\r\n    return () => {\r\n      if (saveTimeout) {\r\n        clearTimeout(saveTimeout);\r\n      }\r\n    };\r\n  }, [answers, lastUpdatedQuestion, onSubmit, saveTimeout]);\r\n\r\n  const handleAnswerChange = (questionId, answer) => {\r\n    // Update the answers state\r\n    setAnswers(prev => {\r\n      const newAnswers = {\r\n        ...prev,\r\n        [questionId]: answer\r\n      };\r\n      \r\n      // Track which question was just updated\r\n      setLastUpdatedQuestion(questionId);\r\n      \r\n      return newAnswers;\r\n    });\r\n    \r\n    // Clear error for this question if it exists\r\n    if (errors[questionId]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[questionId];\r\n        return newErrors;\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n    \r\n    // Check required fields\r\n    questions.forEach(question => {\r\n      if (question.obligatorisk === 'true' && (!answers[question['@_id']] || answers[question['@_id']] === '')) {\r\n        newErrors[question['@_id']] = 'Dette felt er påkrævet';\r\n        isValid = false;\r\n      }\r\n    });\r\n    \r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    setIsSubmitting(true);\r\n    \r\n    // Submit all answers as final answers\r\n    onSubmit(answers, false); // false indicates this is a final submission, not a partial one\r\n    \r\n    // Reset submission state after a short delay\r\n    setTimeout(() => {\r\n      setIsSubmitting(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"question-form\">\r\n      {questions.map(question => (\r\n        <div key={question['@_id']} className=\"question-container\">\r\n          <Question\r\n            question={question}\r\n            onChange={(answer) => handleAnswerChange(question['@_id'], answer)}\r\n          />\r\n          \r\n          {errors[question['@_id']] && (\r\n            <div className=\"error-text\">{errors[question['@_id']]}</div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      \r\n      <button \r\n        type=\"submit\" \r\n        className=\"submit-button\"\r\n        disabled={isSubmitting}\r\n      >\r\n        {isSubmitting ? 'Indsender...' : 'Indsend besvarelser'}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default QuestionForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}